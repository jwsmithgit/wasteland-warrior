<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>min_ehealth = obj_stat_damage.min_damage * 4;
max_ehealth = obj_stat_damage.max_damage * 2;

min_ehealth_upgraded = obj_stat_damage.min_damage * 12;
max_ehealth_upgraded = obj_stat_damage.max_damage * 8;

min_espeed = room_width / ( room_speed * 20 );
max_espeed = room_width / ( room_speed * 8 );

min_espeed_upgraded = room_width / ( room_speed * 12 );
max_espeed_upgraded = room_width / ( room_speed * 4 );

min_edamage = obj_stat_health.min_health / 3;
max_edamage = obj_stat_health.max_health / 6;

min_edamage_upgraded = obj_stat_health.min_health / .8;
max_edamage_upgraded = obj_stat_health.max_health / 4;

min_scale = 1.0;
max_scale = 1.6;

min_scale_upgraded = 1.4;
max_scale_upgraded = 2.0;

min_image_speed = 4 / room_speed;
max_image_speed = 24 / room_speed;

min_xp = 1;
max_xp = 0.1;

min_xp_upgraded = 4;
max_xp_upgraded = 0.4;

hit_move_speed = 1;
hit_move_deceleration = .1;

upgraded = obj_virtual_boss.upgrade;

if( upgraded ) {
    
    ehealth = round ( scr_get_enemy_value ( min_ehealth_upgraded, max_ehealth_upgraded ) );
    espeed = scr_get_enemy_value ( min_espeed_upgraded, max_espeed_upgraded );
    edamage = round ( scr_get_enemy_value ( min_edamage_upgraded, max_edamage_upgraded ) );
    
    image_xscale = scr_get_enemy_value ( min_scale_upgraded, max_scale_upgraded );
    image_yscale = scr_get_enemy_value ( min_scale_upgraded, max_scale_upgraded );
    
    xp = scr_get_enemy_value ( min_xp_upgraded, max_xp_upgraded );
    
} else { 

    ehealth = round ( scr_get_enemy_value ( min_ehealth, max_ehealth ) );
    espeed = scr_get_enemy_value ( min_espeed, max_espeed );
    edamage = round ( scr_get_enemy_value ( min_edamage, max_edamage ) );
    
    image_xscale = scr_get_enemy_value ( min_scale, max_scale );
    image_yscale = scr_get_enemy_value ( min_scale, max_scale );
    
    xp = scr_get_enemy_value ( min_xp, max_xp );
    
}

image_speed = scr_get_enemy_value ( min_image_speed, max_image_speed );

state = "stand";
timer = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// stat updates
if ( state != "dead" ){

    if( upgraded ) {
        
        ehealth = round ( scr_get_enemy_value ( min_ehealth_upgraded, max_ehealth_upgraded ) );
        espeed = scr_get_enemy_value ( min_espeed_upgraded, max_espeed_upgraded );
        edamage = round ( scr_get_enemy_value ( min_edamage_upgraded, max_edamage_upgraded ) );
        
        image_xscale = scr_get_enemy_value ( min_scale_upgraded, max_scale_upgraded );
        image_yscale = scr_get_enemy_value ( min_scale_upgraded, max_scale_upgraded );
        
        xp = scr_get_enemy_value ( min_xp_upgraded, max_xp_upgraded );
        
    } else { 
    
        ehealth = round ( scr_get_enemy_value ( min_ehealth, max_ehealth ) );
        espeed = scr_get_enemy_value ( min_espeed, max_espeed );
        edamage = round ( scr_get_enemy_value ( min_edamage, max_edamage ) );
        
        image_xscale = scr_get_enemy_value ( min_scale, max_scale );
        image_yscale = scr_get_enemy_value ( min_scale, max_scale );
        
        xp = scr_get_enemy_value ( min_xp, max_xp );
        
    }
    
    image_speed = scr_get_enemy_value ( min_image_speed, max_image_speed );
}

//show_debug_message( string( ehealth ) + " " + string( espeed ) + " " + string( edamage ) )
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// detect state change
before_state = state;


// state detecting
// dead
if ( state == "dead" ) {

    if( timer == 0 ){
    
        if ( upgraded )
            sprite_index = spr_virtual_enemy_dead2;
        else
            sprite_index = spr_virtual_enemy_dead;
        image_index = 0;
        
    }
    
    image_xscale *= .98;
    image_yscale *= .98;
    if ( image_angle &gt; -40 ) {
        image_angle -= 2;
    }
    
    if( image_xscale &lt; .05 ){
        instance_destroy();
    }
} 

// hit
else if ( state == "hit" ) {

    if ( timer == 0 ) {
        ehealth -= obj_stat_damage.num;
        if ( ehealth &lt;= 0 ) {
            ehealth = 0;
            state = "dead";
            
            obj_stat_lvl.xp += xp;
            obj_stat_lvl.alarm[2] = 1;
        }
        
        move_speed = hit_move_speed;
    }
    
    // move enemy
    x += move_speed;
    
    // adjust speed
    move_speed -= hit_move_deceleration;
    
    if ( move_speed &lt;= 0 ) {
        var chance = choose ( 0, 1 );
        if chance == 0
            state = "walk";
        else if chance == 1
            state = "stand";
    }
} 

else if ( state == "walk" ) {
    if ( timer == 0 ) {
    
        if ( upgraded )
            sprite_index = spr_virtual_enemy_walk2;
        else
            sprite_index = spr_virtual_enemy_walk;
            
        image_index = 0;
    }
    
    // move enemy
    x -= espeed;
    
    // check if movement causes teleport
    if ( y &gt; 200 and x - sprite_xoffset + sprite_width &lt; 408 ){
    
        y = 178;
        x = 750 + sprite_xoffset;
        
    }
    
    // switch to standing
    var chance_to_stand = random ( room_speed * 8 );
    if ( chance_to_stand &lt; 1 )
        state = "stand";
    
    // switch to attacking
    // times 2 to xoffset because object moves while attacking
    if( upgraded and obj_virtual_hero.state != "dead" and collision_rectangle( x - ( sprite_get_xoffset( spr_virtual_enemy_attack2 ) * 2 ), y - sprite_yoffset, x, y, obj_virtual_hero, true, true) )
        state = "attack";
    else if ( !upgraded and obj_virtual_hero.state != "dead" and collision_rectangle( x - ( sprite_get_xoffset( spr_virtual_enemy_attack ) * 2 ), y - sprite_yoffset, x, y, obj_virtual_hero, true, true) )
        state = "attack";
} 

else if ( state == "attack" ) {

    if ( timer == 0 ) {
        if ( upgraded )
            sprite_index = spr_virtual_enemy_stand2;
        else
            sprite_index = spr_virtual_enemy_stand;
            
        image_index = 0;
        image_speed = 6 / room_speed ;
        
        hitting = false;
    }
    
    
    // attacked, go back to standing
    if( image_index &gt;= image_number-1 ){
        if ( upgraded )
            sprite_index = spr_virtual_enemy_stand2;
        else
            sprite_index = spr_virtual_enemy_stand;
            
        image_index = 0;
    }
    
    
    
    // check if he hits
    var chance_to_hit = random( room_speed );
    if ( chance_to_hit &lt; 1 ) {
    
        if ( upgraded )
            sprite_index = spr_virtual_enemy_attack2;
        else
            sprite_index = spr_virtual_enemy_attack;
    
        image_index = 0;
            
        move_speed = -hit_move_speed;
        
    }
    
    if ( sprite_index == spr_virtual_enemy_attack2 or sprite_index = spr_virtual_enemy_attack ) {
    
        if ( !hitting ) { x += move_speed; }
        move_speed += hit_move_deceleration;
        
        // hit player
        if ( !hitting and collision_rectangle( x - sprite_xoffset, y - sprite_yoffset, x - sprite_xoffset + sprite_width, y - sprite_yoffset + sprite_height, obj_virtual_hero, false, true ) ){
            obj_virtual_hero.state = "hit";
            obj_virtual_hero.timer = 0;
            
            obj_stat_health.decrease_points += edamage;
            if ( obj_stat_health.alarm[0] == -1 ) { 
            
                obj_stat_health.alarm[0] = 1; 
            }
            hitting = true
        }
        
        if ( image_index + 1 &gt;= image_number ){
            // reset attack mode
            timer = 0;
        }
    
    }
    
    
    // switch out of attack to stand or walk, player has moved left
    if( upgraded and obj_virtual_hero.state == "dead" or !collision_rectangle ( x - ( sprite_get_xoffset( spr_virtual_enemy_attack2 ) * 2 ), y - sprite_yoffset, x, y, obj_virtual_hero, true, true ) ) {
        var chance = choose(0,1);
        if ( chance == 0 )
            state = "walk";
        else if ( chance == 1 )
            state = "stand";
    }
            
    else if ( !upgraded and obj_virtual_hero.state == "dead" or !collision_rectangle( x - ( sprite_get_xoffset( spr_virtual_enemy_attack ) * 2 ), y - sprite_yoffset, x, y, obj_virtual_hero,  true, true ) ) {
        var chance = choose(0,1);
        if chance == 0
            state = "walk";
        else if chance == 1
            state = "stand";
    }
        
} 

else if ( state == "stand" ){
    if( timer == 0 ){
        if ( upgraded )
            sprite_index = spr_virtual_enemy_stand2;
        else
            sprite_index = spr_virtual_enemy_stand;
            
        image_index = 0;
    }
    
    var chance_to_walk = random(room_speed*4);
    if ( chance_to_walk &lt; 1 and obj_virtual_hero.state != "dead" )
        state = "walk";
    
}

timer ++;

if ( before_state != state ){
    timer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_virtual_house">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( x &lt; other.x + other.sprite_width/4 and random(30) &lt; 1 ){
    state = "attack";
    timer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,47</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
