<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_virtual_hero_stand_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>min_move_speed = room_width / ( room_speed * 20 );
max_move_speed = room_width / ( room_speed * 6 );

min_scale = 1;
max_scale = 2;

standing_image_speed = 4 / room_speed;
min_walking_image_speed = 4 / room_speed;
max_walking_image_speed = 1;

hit_move_speed = -2;
hit_move_deceleration = - 0.1;

image_xscale = scr_get_player_scale();
image_yscale = scr_get_player_scale();

state = "stand";
facing_right = true;
has_sword = false;
image_speed = standing_image_speed;

relics = 4;
timer = 0;


//first_pass = true;

// so we dont hit two enemies with one swing
//hit_enemy = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// detect state change
before_state = state;

// dead state
if ( state == "dead" ) {
    if ( timer == 0 ) {
        // stop all music
        obj_music.next_song = snd_lost;
        if ( audio_is_playing ( snd_lair ) ) {
            audio_sound_gain ( snd_lair, 0, 5000 );
        }
        if ( audio_is_playing ( snd_pa ) ) {
            audio_sound_gain ( snd_pa, 0, 5000 );
        }
        
        if( y &lt; 200 or x &lt; 640 ) {
        
            if ( has_sword and facing_right )
                sprite_index = spr_virtual_hero_dead_sword;
            else if ( has_sword and !facing_right )
                sprite_index = spr_virtual_hero_dead_left_sword;
            else if ( !has_sword and facing_right )
                sprite_index = spr_virtual_hero_dead;
            else if ( !has_sword and !facing_right )
                sprite_index = spr_virtual_hero_dead_left;
                
        } else {
            sprite_index = spr_virtual_hero_dead_boss;
        }
        image_index = 0;
        
        // enemies to standing state
        if( obj_virtual_enemy.state != "dead" ) {
        
            obj_virtual_enemy.state = "stand";
            obj_virtual_enemy.timer = 0;
        }
        
    }
    
    // dying regularly
    if ( sprite_index != spr_virtual_hero_dead_boss ) {
        if ( facing_right and image_angle &lt; 45 ) {
            image_angle += 5;
        } 
        else if ( !facing_right and image_angle &gt; -45 ) {
            image_angle -= 5;
        }
    }
    // dying by boss
    else {
        if ( image_index &gt;= image_number-1 ) {
            image_speed = 0;
        }
    }
} 
// getting hit by enemy state
else if ( state == "hit" ) {
    if( timer == 0 ) {
    
        sprite_index = spr_virtual_hero_stand_right;
        
        instance_create ( x - ( sprite_width / 4 ), y - ( sprite_height / 2 ), obj_blood );
        move_speed = hit_move_speed;
    }
    
    // move hero
    x += move_speed;
    
    // adjust speed
    move_speed -= hit_move_deceleration;
    
    // done decelerating, back to stand state
    if ( move_speed &gt;= 0 ) {
        state = "stand"
    }
} 

// walking state
else if ( state == "walk" ){
    if( timer == 0 ){
        
        // choose sprite
        if ( has_sword and facing_right )
            sprite_index = spr_virtual_hero_walk_right_sword;
        else if ( has_sword and !facing_right )
            sprite_index = spr_virtual_hero_walk_left_sword;
        else if ( !has_sword and facing_right )
            sprite_index = spr_virtual_hero_walk_right;
        else if ( !has_sword and !facing_right )
            sprite_index = spr_virtual_hero_walk_left;
            
        // choose move speed
        if ( facing_right ) {
            move_speed = scr_get_player_speed();
        } else {
            move_speed = - scr_get_player_speed();
        }
            
        image_index = 0;
        image_speed = scr_get_player_walking_image_speed();
        
        collision = noone;
    }
    
    // move player
    // check for collision with enemies
    collision = collision_rectangle ( x - sprite_xoffset, y - sprite_yoffset, x - sprite_xoffset + sprite_width, y - sprite_yoffset + sprite_height, obj_virtual_enemy, false, true );
    if ( collision != noone ) {
        if( collision.state != "dead" ){
        
            x = xprevious; //collision.x - collision.sprite_xoffset - sprite_width + sprite_xoffset;
            state = "stand";
            
            collision.state = "attack";
            collision.timer = 0;
        }
    } 
    else if ( x - move_speed &lt; 112 ) { 
        state = "stand";
    }
        x += move_speed;
    
    
    // check if movement causes teleport
    if( facing_right and y &lt; 200 and x - sprite_xoffset &gt; 750 ) {
        y = 380;
        x = 408 - sprite_width + sprite_xoffset;
        
        // start lair sound
        if ( !audio_is_playing ( snd_lair ) ) {
            audio_sound_gain ( snd_lair, 0, 0 );
            audio_play_sound ( snd_lair, 1, true );
            audio_sound_gain ( snd_lair, 0.5, 10000 );
        } else {
            audio_sound_gain ( snd_lair, 0.25, 10000 );
        }
    } 
    else if ( !facing_right and y &gt; 200 and x + ( sprite_width - sprite_xoffset ) &lt; 408 ) {
        y = 178;
        x = 750 + sprite_xoffset;
        
        // lower lair sound volume
        audio_sound_gain ( snd_lair, 0, 10000 );
    }
    
    // final position win or lose game
    if( y &gt; 200 and x &gt; 640 ){
        if( obj_stat_lvl.num &gt; 700 or obj_stat_lvl.num &gt;= 40 and has_sword ){
            // victory
            state = "victory"
            
        }
        // dead from boss
        else {
        
            state = "dead"
        }
    }
    
} 
// swinging the sword
else if ( state == "attack" ){
    if( timer == 0 ){
    
        // change sprite
        if ( has_sword ) {
            sprite_index = spr_virtual_hero_attack_sword;
        }
        else {
            sprite_index = spr_virtual_hero_attack;
        }
        image_index = 0;
        image_speed = ( image_number + 1 ) / room_speed;
        
        move_speed = -hit_move_speed / 2;
        
        collision = noone;
        collision_map = ds_map_create()
    }
    
    // move hero
    x += move_speed;
    
    // adjust speed
    move_speed += hit_move_deceleration;
    
    var deactive_list = ds_list_create();
    do{
        
        collision = collision_rectangle ( x - sprite_xoffset, y - sprite_yoffset, x - sprite_xoffset + sprite_width, y - sprite_yoffset + sprite_height, obj_virtual_enemy, true, true );
        ds_list_add( deactive_list, collision );
        
        if ( collision != noone and collision.state != "dead" and !ds_map_exists( collision_map, collision.instance_id ) ) {
        
            // change collision object stuff
            with ( collision ) {
                state = "hit";
                timer = 0; 
            }
                
            move_speed = 0;
            
            ds_map_add( collision_map, collision.instance_id, 1 )
                
        } 
        
        instance_deactivate_object( collision );
    
    } until ( collision == noone );
    
    for ( var i = 0; i &lt; ds_list_size( deactive_list ); i++ ){
        
        instance_activate_object( ds_list_find_value( deactive_list, i ) );
    }
    
    // reset to standing
    if ( image_index &gt;= image_number - 1 ) {
    
        state = "stand";
        ds_map_destroy( collision_map );
    }
    
} 

// standing still
else if ( state == "stand" ) {

    if ( timer == 0 ) {
    
        if ( has_sword and facing_right )
            sprite_index = spr_virtual_hero_stand_right_sword;
        else if ( has_sword and !facing_right )
            sprite_index = spr_virtual_hero_stand_left_sword;
        else if ( !has_sword and facing_right )
            sprite_index = spr_virtual_hero_stand_right;
        else if ( !has_sword and !facing_right )
            sprite_index = spr_virtual_hero_stand_left;
            
        image_index = 0;
        image_speed = standing_image_speed;
    } 
} 

// winning the game
else if ( state == "victory" ){

    if( timer = 0 ){
        // change the music
        
        obj_music.next_song = snd_win;
        if ( audio_is_playing ( snd_lair ) ) {
            audio_sound_gain ( snd_lair, 0, 5000 );
        }
        if ( audio_is_playing ( snd_pa ) ) {
            audio_sound_gain ( snd_pa, 0, 5000 );
        }
        
        // change sprite
        if ( has_sword )
            sprite_index = spr_virtual_hero_victory_sword;
        else
            sprite_index = spr_virtual_hero_victory;
            
        image_index = 0;
        
        // change boss to dead
        obj_virtual_boss.alarm[1] = 1;
        
    }
}

timer ++;

// state has changed reset timer
if before_state != state{
    timer = 0;
    //show_debug_message(state);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,63</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
